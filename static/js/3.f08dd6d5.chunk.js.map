{"version":3,"sources":["components/AuthPage/AuthPage.js","containers/Auth/Auth.js"],"names":["AuthForm","styled","form","AuthInput","Input","theme","media","tablet","FormButton","Button","SwitchButton","authPage","props","formElementsArray","formElementsObj","isSignUp","formSubmit","formIsValid","inputChanged","switchAuthMode","key","push","id","config","map","formElement","autocomplete","elementConfig","className","elementType","value","invalid","valid","shouldValidate","validation","touched","changed","event","onSubmit","disabled","clicked","Auth","state","loginControls","email","type","placeholder","required","password","length","absMin","absMax","signUpControls","username","chars","verifyPassword","match","companyAccessCode","checkValidity","rules","isValid","trim","updateControlsAndFormValidity","updatedControls","setState","inputChangedHandler","controlName","controls","updateObject","target","inputIdentifier","switchAuthModeHandler","prevState","submitHandler","preventDefault","submitInfo","userInfo","company","onAuth","AuthPage","this","Component","connect","loading","auth","error","isAuthenticated","uid","authRedirectPath","dispatch","actions"],"mappings":"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","file":"static/js/3.f08dd6d5.chunk.js","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { ContentBlock, Header, Button, Input } from '../UI'\n\nconst AuthForm = styled.form`\n    width: 100%;\n    /* margin: 1rem 0;\n    display: flex;\n    flex-flow: column;\n    justify-content: center;\n    align-items: center; */\n`\n\nconst AuthInput = styled(Input)`\n    width: 95%;\n    max-width: 60rem;\n\n    @media (max-width: ${({ theme }) => theme.media.tablet} ) {\n        max-width: 45rem;\n    }\n`\n\nconst FormButton = styled(Button)`\n    width: 18rem;\n    font-weight: bold;\n    margin-top: 2rem;\n`\n\nconst SwitchButton = styled(Button)`\n    text-decoration: underline;\n    background-color: inherit;\n    border: none;\n`\n\nconst authPage = props => {\n    const formElementsArray = []\n    const {\n        formElementsObj,\n        isSignUp,\n        formSubmit,\n        formIsValid,\n        inputChanged,\n        switchAuthMode,\n    } = props\n        \n    for (let key in formElementsObj) {\n        formElementsArray.push({\n            id: key,\n            config: formElementsObj[key],\n        })\n    }\n    let form = formElementsArray.map(formElement => (\n        <AuthInput \n            key={formElement.id}\n            autocomplete={formElement.config.elementConfig.autocomplete}\n            className=\"auth-form--input\"\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            invalid={!formElement.config.valid}\n            shouldValidate={formElement.config.validation}\n            touched={formElement.config.touched}\n            changed={(event) => inputChanged(event, formElement.id)} \n            />\n    ))\n    \n    return (\n        <ContentBlock\n            className='auth=page'\n            >\n            <Header\n                className='auth-page--header'\n                >\n                {isSignUp ? \"SIGN UP\" : \"LOG IN\"}\n            </Header>\n            <AuthForm\n                className='auth-form'\n                onSubmit={formSubmit}>\n                {form}\n                <FormButton disabled={!formIsValid}>SUBMIT</FormButton>\n            </AuthForm>\n            <SwitchButton\n                className=\"auth-page--switch\"\n                clicked={switchAuthMode}>\n                {isSignUp ? \"Already registered? Sign in!\" : \"First time here? Sign up!\"}\n            </SwitchButton>\n        </ContentBlock>\n    )\n}\n\nexport default authPage\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport AuthPage from '../../components/AuthPage/AuthPage'\nimport * as actions from '../../store/actions'\nimport { updateObject } from '../../shared/objectUtility'\n\nclass Auth extends Component {\n    state = {\n        loginControls: {\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email',\n                    autocomplete: 'email',\n                },\n                value: '',\n                validation: {\n                  required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password',\n                    autocomplete: 'current-password',\n                },\n                value: '',\n                validation: {\n                  required: true,\n                  length: {\n                      absMin: 6,\n                      absMax: 26\n                  },\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        signUpControls: {\n            username: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: 'Choose a Username',\n                    autocomplete: 'username',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    length: {\n                        absMin: 5,\n                        absMax: 22,\n                    },\n                    chars: 'alnum',\n                },\n                valid: false,\n                touched: false,\n            },\n            email: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'email',\n                    placeholder: 'Your Email',\n                    autocomplete: 'email',\n                },\n                value: '',\n                validation: {\n                  required: true,\n                },\n                valid: false,\n                touched: false\n            },\n            password: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Password',\n                    autocomplete: 'new-password',\n                },\n                value: '',\n                validation: {\n                  required: true,\n                  length: {\n                      absMin: 6,\n                      absMax: 26\n                  },\n                },\n                valid: false,\n                touched: false\n            },\n            verifyPassword: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'password',\n                    placeholder: 'Re-enter Password',\n                    autocomplete: 'verify-password',\n                },\n                value: '',\n                validation: {\n                  required: true,\n                  match: 'password',\n                },\n                valid: false,\n                touched: false\n            },\n            companyAccessCode: {\n                elementType: 'input',\n                elementConfig: {\n                    type: 'text',\n                    placeholder: '10 Character Company Access Code',\n                },\n                value: '',\n                validation: {\n                    required: true,\n                    length: {\n                        absMin: 10,\n                        absMax: 10\n                    },\n                },\n                valid: false,\n                touched: false\n            },\n        },\n        isSignUp: false,\n        formIsValid: false\n    }\n\n    checkValidity = (value, rules) => {\n        let isValid = true;\n        \n        if (!rules) return true\n        \n        if (rules.required) {\n            isValid = value.trim() !== '' && isValid;\n        }\n        \n        if (rules.length) {\n            isValid = value.length >= rules.length.absMin && value.length <= rules.length.absMax && isValid\n        }\n\n        // TO DO\n        // way more validation stuff\n\n        return isValid\n    }\n\n    updateControlsAndFormValidity = (updatedControls, formIsValid) => {\n        if (this.state.isSignUp) {\n            this.setState({signUpControls: updatedControls, formIsValid: formIsValid})\n        } else {\n            this.setState({loginControls: updatedControls, formIsValid: formIsValid})\n        }\n    }\n\n    // updates auth app with user entry, changes value, checks validity\n    inputChangedHandler = (event, controlName) => {\n        let controls = {...this.state.loginControls}\n        if (this.state.isSignUp) controls = {...this.state.signUpControls}\n        const updatedControls = updateObject(controls, {\n            [controlName]: updateObject(controls[controlName], {\n                value: event.target.value,\n                valid: this.checkValidity(event.target.value, controls[controlName].validation),\n                touched: true\n            })\n        })\n\n        let formIsValid = true\n        for (let inputIdentifier in controls) {\n            formIsValid = updatedControls[inputIdentifier].valid && formIsValid\n        }\n\n        this.updateControlsAndFormValidity(updatedControls, formIsValid)\n    }\n\n    switchAuthModeHandler = () => {\n        let updatedControls = {...this.state.loginControls}\n        if (this.state.isSignUp) updatedControls = {...this.state.signUpControls}\n        \n        for (let controlName in updatedControls) {\n            updatedControls[controlName].value = ''\n            updatedControls[controlName].valid = false\n            updatedControls[controlName].touched = false\n        }\n\n        this.updateControlsAndFormValidity(updatedControls, false)\n\n        this.setState(prevState => {\n            return {\n                isSignUp: !prevState.isSignUp}\n            })\n    }\n\n    submitHandler = event => {\n        // prevent reloading of page on submit\n        event.preventDefault()\n        let controls = this.state.loginControls\n        if (this.state.isSignUp) controls = this.state.signUpControls\n        const submitInfo = {\n            email: controls.email.value,\n            password: controls.password.value,\n            isSignUp: this.state.isSignUp,\n            userInfo: null\n        }\n        // use the below object to push user info to firebase\n        if (this.state.isSignUp) {\n            submitInfo.userInfo = {\n                email: controls.email.value,\n                username: controls.username.value,\n                company: controls.companyAccessCode.value\n            }\n        }\n        this.props.onAuth(submitInfo)\n    }\n\n    render() {\n        return (\n            <AuthPage\n                isSignUp={this.state.isSignUp}\n                formSubmit={this.submitHandler}\n                formIsValid={this.state.formIsValid}\n                formElementsObj={this.state.isSignUp ? this.state.signUpControls : this.state.loginControls}\n                inputChanged={this.inputChangedHandler}\n                switchAuthMode={this.switchAuthModeHandler}\n                />\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuthenticated: state.auth.uid !== null,\n        authRedirectPath: state.auth.authRedirectPath\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (submitInfo) => dispatch(actions.auth(submitInfo))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth)\n"],"sourceRoot":""}